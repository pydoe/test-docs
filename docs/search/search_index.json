{"config":{"lang":["en"],"separator":"[\\s\\-\\.]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"pyDOE3: An experimental design package for Python","text":"<p>pyDOE3 is fork of pyDOE2 which is a fork of pyDOE.</p> <p>As for <code>pyDOE2</code> wrt to <code>pyDOE</code>, <code>pyDOE3</code> came to life to solve  bugs and issues that remained unsolved in <code>pyDOE2</code>.</p> <p>The <code>pyDOE3</code> package is designed to help the  scientist, engineer, statistician, etc., to construct appropriate  experimental designs.</p> <p>Quick Start</p> <p>All available designs can be accessed after a simple import statement:</p> <pre><code>&gt;&gt;&gt; from pyDOE3 import *\n</code></pre>"},{"location":"#capabilities","title":"Capabilities","text":"<p>The package currently includes functions for creating designs for any  number of factors:</p>"},{"location":"#factorial-designs","title":"Factorial Designs","text":"<ol> <li>General Full-Factorial (<code>fullfact</code>)</li> <li>2-Level Full-Factorial (<code>ff2n</code>)</li> <li>2-Level Fractional-Factorial (<code>fracfact</code>)</li> <li>Plackett-Burman (<code>pbdesign</code>)</li> <li>Generalized Subset Design (<code>gsd</code>)</li> </ol>"},{"location":"#response-surface-designs","title":"Response Surface Designs","text":"<ol> <li>Box-Behnken (<code>bbdesign</code>)</li> <li>Central-Composite (<code>ccdesign</code>)</li> <li>Doehlert Design (<code>doehlert_shell_design</code>, <code>doehlert_simplex_design</code>)</li> </ol>"},{"location":"#randomized-designs","title":"Randomized Designs","text":"<ol> <li>Latin-Hypercube (<code>lhs</code>)</li> <li>Random K-Means (<code>random_k_means</code>)</li> <li>Random Uniform (<code>random_uniform</code>)</li> </ol>"},{"location":"#low-discrepancy-sequences","title":"Low-Discrepancy Sequences","text":"<ol> <li>Sukharev Grid (<code>sukharev_grid</code>)</li> <li>Sobol' Sequence (<code>sobol_sequence</code>)</li> <li>Halton Sequence (<code>halton_sequence</code>)</li> <li>Rank-1 Lattice Design (<code>rank1_lattice</code>)</li> <li>Korobov Sequence (<code>korobov_sequence</code>)</li> <li>Cranley-Patterson Randomization (<code>cranley_patterson_shift</code>)</li> </ol>"},{"location":"#sampling-designs","title":"Sampling Designs","text":"<ol> <li>Morris Method (<code>morris_sampling</code>)</li> <li>Saltelli Sampling (<code>saltelli_sampling</code>)</li> </ol>"},{"location":"#taguchi-designs","title":"Taguchi Designs","text":"<ol> <li>Orthogonal arrays and robust design utilities (<code>taguchi_design</code>, <code>compute_snr</code>)</li> </ol>"},{"location":"#optimal-designs","title":"Optimal Designs","text":"<ol> <li>Advanced optimal design algorithms (<code>optimal_design</code>)</li> <li>Optimality criteria (<code>A</code>, <code>C</code>, <code>D</code>, <code>E</code>, <code>G</code>, <code>I</code>, <code>S</code>, <code>T</code>, <code>V</code>)</li> <li>Search algorithms (<code>Sequential (Dykstra)</code>, <code>Simple Exchange (Wynn-Mitchell)</code>, <code>Fedorov</code>, <code>Modified Fedorov</code>, <code>DETMAX</code>)</li> </ol>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>NumPy</li> <li>SciPy</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install --upgrade pyDOE3\n</code></pre> <p>or with Anaconda distribution</p> <pre><code>conda install -c conda-forge pydoe3\n</code></pre>"},{"location":"#credits","title":"Credits","text":"<p>This code was originally published by the following individuals for use with Scilab:</p> <ul> <li>Copyright (C) 2012 - 2013 - Michael Baudin</li> <li>Copyright (C) 2012 - Maria Christopoulou</li> <li>Copyright (C) 2010 - 2011 - INRIA - Michael Baudin</li> <li>Copyright (C) 2009 - Yann Collette</li> <li>Copyright (C) 2009 - CEA - Jean-Marc Martinez</li> </ul> <p>pyDOE</p> <ul> <li>Copyright \u00a9 2014, Abraham D. Lee &amp; tisimst</li> </ul> <p>pyDOE2</p> <ul> <li>Copyright \u00a9 2018, Rickard Sj\u00f6gren &amp; Daniel Svensson</li> </ul> <p>Much thanks goes to these individuals.</p>"},{"location":"#license","title":"License","text":"<p>This package is provided under The BSD License (3-Clause)</p>"},{"location":"#references","title":"References","text":"<ul> <li>Factorial designs</li> <li>Plackett-Burman designs</li> <li>Box-Behnken designs</li> <li>Central composite designs</li> <li>Latin-Hypercube designs</li> <li>Taguchi designs</li> <li>Optimal experimental design</li> <li>Halton sequence</li> <li>Sobol' sequence</li> <li>Cranley-Patterson method</li> </ul> <p>There is also a wealth of information on the NIST website about the various design matrices that can be created as well as detailed information about designing/setting-up/running experiments in general.</p>"},{"location":"doe_optimal/","title":"Optimal Designs","text":"<p>In this section, the following kinds of optimal designs will  be described:</p> <ul> <li>Advanced Optimal Design Algorithms</li> <li>Optimality Criteria</li> <li>Search Algorithms</li> </ul> <p>Quick Start</p> <p>All available designs can be accessed after a simple import statement:</p> <pre><code>&gt;&gt;&gt; from pyDOE3 import *\n</code></pre>"},{"location":"doe_optimal/#optimal-design-algorithms","title":"Advanced Optimal Design Algorithms","text":"<p>Advanced algorithms for constructing optimal experimental designs.</p> <p>[Detailed content will be added after full conversion]</p>"},{"location":"doe_optimal/#optimality-criteria","title":"Optimality Criteria","text":"<p>Various optimality criteria including A, C, D, E, G, I, S, T, and V criteria.</p> <p>[Detailed content will be added after full conversion]</p>"},{"location":"doe_optimal/#search-algorithms","title":"Search Algorithms","text":"<p>Different search algorithms including:</p> <ul> <li>Sequential (Dykstra)</li> <li>Simple Exchange (Wynn-Mitchell)</li> <li>Fedorov</li> <li>Modified Fedorov</li> <li>DETMAX</li> </ul> <p>[Detailed content will be added after full conversion]</p>"},{"location":"factorial/","title":"Factorial Designs","text":"<p>In this section, the following kinds of factorial designs will be described:</p> <ul> <li>General Full-Factorial</li> <li>2-Level Full-Factorial</li> <li>2-Level Fractional-Factorial</li> <li>Plackett-Burman</li> <li>Generalized Subset Design</li> </ul> <p>Quick Start</p> <p>All available designs can be accessed after a simple import statement:</p> <pre><code>&gt;&gt;&gt; from pyDOE3 import *\n</code></pre>"},{"location":"factorial/#general-full-factorial","title":"General Full-Factorial (<code>fullfact</code>)","text":"<p>This kind of design offers full flexibility as to the number of discrete levels for each factor in the design. Its usage is simple:</p> <pre><code>&gt;&gt;&gt; fullfact(levels)\n</code></pre> <p>where <code>levels</code> is an array of integers, like:</p> <pre><code>&gt;&gt;&gt; fullfact([2, 3])\narray([[ 0.,  0.],\n       [ 1.,  0.],\n       [ 0.,  1.],\n       [ 1.,  1.],\n       [ 0.,  2.],\n       [ 1.,  2.]])\n</code></pre> <p>As can be seen in the output, the design matrix has as many columns as items in the input array.</p>"},{"location":"factorial/#2-level-full-factorial","title":"2-Level Full-Factorial (<code>ff2n</code>)","text":"<p>This function is a convenience wrapper to <code>fullfact</code> that forces all the factors to have two levels each, you simple tell it how many factors to create a design for:</p> <pre><code>&gt;&gt;&gt; ff2n(3)\narray([[-1., -1., -1.],\n       [ 1., -1., -1.],\n       [-1.,  1., -1.],\n       [ 1.,  1., -1.],\n       [-1., -1.,  1.],\n       [ 1., -1.,  1.],\n       [-1.,  1.,  1.],\n       [ 1.,  1.,  1.]])\n</code></pre>"},{"location":"factorial/#2-level-fractional-factorial","title":"2-Level Fractional-Factorial (<code>fracfact</code>)","text":"<p>This function requires a little more knowledge of how the confounding will be allowed (this means that some factor effects get muddled with other interaction effects, so it's harder to distinguish between them).</p> <p>Let's assume that we just can't afford (for whatever reason) the number of runs in a full-factorial design. We can systematically decide on a fraction of the full-factorial by allowing some of the factor main effects to be confounded with other factor interaction effects. This is done by defining an alias structure that defines, symbolically, these interactions. These alias structures are written like \"C = AB\" or \"I = ABC\", or \"AB = CD\", etc. These define how one column is related to the others.</p> <p>For example, the alias \"C = AB\" or \"I = ABC\" indicate that there are three factors (A, B, and C) and that the main effect of factor C is confounded with the interaction effect of the product AB, and by extension, A is confounded with BC and B is confounded with AC. A full- factorial design with these three factors results in a design matrix with 8 runs, but we will assume that we can only afford 4 of those runs. To create this fractional design, we need a matrix with three columns, one for A, B, and C, only now where the levels in the C column is created by the product of the A and B columns.</p> <p>The input to <code>fracfact</code> is a generator string of symbolic characters (lowercase or uppercase, but not both) separated by spaces, like:</p> <pre><code>&gt;&gt;&gt; gen = 'a b ab'\n</code></pre> <p>This design would result in a 3-column matrix, where the third column is implicitly defined as <code>\"c = ab\"</code>. This means that the factor in the third column is confounded with the interaction of the factors in the first two columns. The design ends up looking like this:</p> <pre><code>&gt;&gt;&gt; fracfact('a b ab')\narray([[-1., -1.,  1.],\n       [ 1., -1., -1.],\n       [-1.,  1., -1.],\n       [ 1.,  1.,  1.]])\n</code></pre> <p>Fractional factorial designs are usually specified using the notation 2^(k-p), where k is the number of columns and p is the number of effects that are confounded. In terms of resolution level, higher is \"better\". The above design would be considered a 2^(3-1) fractional factorial design, a \u00bd-fraction design, or a Resolution III design (since the smallest alias \"I=ABC\" has three terms on the right-hand side). Another common design is a Resolution III, 2^(7-4) fractional factorial and would be created using the following string generator:</p> <pre><code>&gt;&gt;&gt; fracfact('a b ab c ac bc abc')\narray([[-1., -1.,  1., -1.,  1.,  1., -1.],\n       [ 1., -1., -1., -1., -1.,  1.,  1.],\n       [-1.,  1., -1., -1.,  1., -1.,  1.],\n       [ 1.,  1.,  1., -1., -1., -1., -1.],\n       [-1., -1.,  1.,  1., -1., -1.,  1.],\n       [ 1., -1., -1.,  1.,  1., -1., -1.],\n       [-1.,  1., -1.,  1., -1.,  1., -1.],\n       [ 1.,  1.,  1.,  1.,  1.,  1.,  1.]])\n</code></pre> <p>More sophisticated generator strings can be created using the \"+\" and \"-\" operators. The \"-\" operator swaps the levels of that column like this:</p> <pre><code>&gt;&gt;&gt; fracfact('a b -ab')\narray([[-1., -1., -1.],\n       [ 1., -1.,  1.],\n       [-1.,  1.,  1.],\n       [ 1.,  1., -1.]])\n</code></pre> <p>In order to reduce confounding, we can utilize the <code>fold</code> function:</p> <pre><code>&gt;&gt;&gt; m = fracfact('a b ab')\n&gt;&gt;&gt; fold(m)\narray([[-1., -1.,  1.],\n       [ 1., -1., -1.],\n       [-1.,  1., -1.],\n       [ 1.,  1.,  1.],\n       [ 1.,  1., -1.],\n       [-1.,  1.,  1.],\n       [ 1., -1.,  1.],\n       [-1., -1., -1.]])\n</code></pre> <p>Applying the fold to all columns in the design breaks the alias chains between every main factor and two-factor interactions. This means that we can then estimate all the main effects clear of any two-factor interactions. Typically, when all columns are folded, this \"upgrades\" the resolution of the design.</p> <p>By default, <code>fold</code> applies the level swapping to all columns, but we can fold specific columns (first column = 0), if desired, by supplying an array to the keyword <code>columns</code>:</p> <pre><code>&gt;&gt;&gt; fold(m, columns=[2])\narray([[-1., -1.,  1.],\n       [ 1., -1., -1.],\n       [-1.,  1., -1.],\n       [ 1.,  1.,  1.],\n       [-1., -1., -1.],\n       [ 1., -1.,  1.],\n       [-1.,  1.,  1.],\n       [ 1.,  1., -1.]])\n</code></pre> <p>Another way to reduce confounding it to scan several (or all) available fractional designs and pick the one that has less confounding. The function <code>fracfact_opt</code> performs just that. For a 2^k-p fractional factorial the function scans all generators that create at most 2^k-p experiments, and pick the one that has confounding on interactions of order as high as possible:</p> <pre><code>&gt;&gt;&gt; design, alias_map, alias_cost = fracfact_opt(6, 2)\n&gt;&gt;&gt; design\n'a b c d bcd acd'\n&gt;&gt;&gt; print('\\n'.join(alias_map))\na = bef = cdf = abcde\nb = aef = cde = abcdf\nc = adf = bde = abcef\nd = acf = bce = abdef\ne = abf = bcd = acdef\nf = abe = acd = bcdef\naf = be = cd = abcdef\nab = ef = acde = bcdf\nac = df = abde = bcef\nad = cf = abce = bdef\nae = bf = abcd = cdef\nbc = de = abdf = acef\nbd = ce = abcf = adef\nabc = ade = bdf = cef\nabd = ace = bcf = def\nabef = acdf = bcde\n</code></pre> <p>You can generate the human-readable alias_map of any design with the function <code>fracfact_aliasing</code>:</p> <pre><code>&gt;&gt;&gt; print('\\n'.join(fracfact_aliasing(fracfact('a b ab'))[0]))\na = bc\nb = ac\nc = ab\nabc\n</code></pre> <p>Note</p> <p>Care should be taken to decide the appropriate alias structure for your design and the effects that folding has on it.</p>"},{"location":"factorial/#2-level-fractional-factorial-specified-by-resolution-fracfact_by_res","title":"2-Level Fractional-Factorial specified by resolution (<code>fracfact_by_res</code>)","text":"<p>This function constructs a minimal design at given resolution. It does so by constructing a generator string with a minimal number of base factors and passes it to <code>fracfact</code>. This approach favors convenience over fine-grained control over which factors that are confounded.</p> <p>To construct a 6-factor, resolution III-design, <code>fractfact_by_res</code> is used like this:</p> <pre><code>&gt;&gt;&gt; fracfact_by_res(6, 3)\n    array([[-1., -1., -1.,  1.,  1.,  1.],\n           [ 1., -1., -1., -1., -1.,  1.],\n           [-1.,  1., -1., -1.,  1., -1.],\n           [ 1.,  1., -1.,  1., -1., -1.],\n           [-1., -1.,  1.,  1., -1., -1.],\n           [ 1., -1.,  1., -1.,  1., -1.],\n           [-1.,  1.,  1., -1., -1.,  1.],\n           [ 1.,  1.,  1.,  1.,  1.,  1.]])\n</code></pre>"},{"location":"factorial/#plackett-burman","title":"Plackett-Burman (<code>pbdesign</code>)","text":"<p>Another way to generate fractional-factorial designs is through the use of Plackett-Burman designs. These designs are unique in that the number of trial conditions (rows) expands by multiples of four (e.g. 4, 8, 12, etc.). The max number of columns allowed before a design increases the number of rows is always one less than the next higher multiple of four.</p> <p>For example, I can use up to 3 factors in a design with 4 rows:</p> <pre><code>&gt;&gt;&gt; pbdesign(3)\narray([[-1., -1.,  1.],\n       [ 1., -1., -1.],\n       [-1.,  1., -1.],\n       [ 1.,  1.,  1.]])\n</code></pre> <p>But if I want to do 4 factors, the design needs to increase the number of rows up to the next multiple of four (8 in this case):</p> <pre><code>&gt;&gt;&gt; pbdesign(4)\narray([[-1., -1.,  1., -1.],\n       [ 1., -1., -1., -1.],\n       [-1.,  1., -1., -1.],\n       [ 1.,  1.,  1., -1.],\n       [-1., -1.,  1.,  1.],\n       [ 1., -1., -1.,  1.],\n       [-1.,  1., -1.,  1.],\n       [ 1.,  1.,  1.,  1.]])\n</code></pre> <p>Thus, an 8-run Plackett-Burman design can handle up to (8 - 1) = 7 factors.</p> <p>As a side note, It just so happens that the Plackett-Burman and 2^(7-4) fractional factorial design are identical:</p> <pre><code>&gt;&gt;&gt; np.all(pbdesign(7)==fracfact('a b ab c ac bc abc'))\nTrue\n</code></pre>"},{"location":"factorial/#generalized-subset-design","title":"Generalized Subset Design (<code>gsd</code>)","text":"<p>GSD is a generalization of traditional fractional factorial designs to problems where factors  can have more than two levels.</p> <p>In many application problems, factors can have categorical or quantitative factors on more than two levels.  Previous reduced designs have not been able to deal with such types of problems.  Full multi-level factorial designs can handle such problems but are however not economical  regarding the number of experiments.</p> <p>The GSD provide balanced designs in multi-level experiments with the number of experiments  reduced by a user-specified reduction factor. Complementary reduced designs are also provided  analogous to fold-over in traditional fractional factorial designs.</p> <p>An example with three factors using three, four and six levels respectively reduced with a factor 4:</p> <pre><code>&gt;&gt;&gt; gsd([3, 4, 6], 4)\narray([[0, 0, 0],\n        [0, 0, 4],\n        [0, 1, 1],\n        [0, 1, 5],\n        [0, 2, 2],\n        [0, 3, 3],\n        [1, 0, 1],\n        [1, 0, 5],\n        [1, 1, 2],\n        [1, 2, 3],\n        [1, 3, 0],\n        [1, 3, 4],\n        [2, 0, 2],\n        [2, 1, 3],\n        [2, 2, 0],\n        [2, 2, 4],\n        [2, 3, 1],\n        [2, 3, 5]])\n</code></pre>"},{"location":"factorial/#more-information","title":"More Information","text":"<p>If the user needs more information about appropriate designs, please consult the following articles on Wikipedia:</p> <ul> <li>Factorial designs</li> <li>Plackett-Burman designs</li> </ul> <p>There is also a wealth of information on the NIST website about the various design matrices that can be created as well as detailed information about designing/setting-up/running experiments in general.</p>"},{"location":"low_discrepancy_sequences/","title":"Low-Discrepancy Sequences","text":"<p>In this section, the following kinds of low-discrepancy sequences will  be described:</p> <ul> <li>Sukharev Grid</li> <li>Sobol' Sequence</li> <li>Halton Sequence</li> <li>Rank-1 Lattice Design</li> <li>Korobov Sequence</li> <li>Cranley-Patterson Randomization</li> </ul> <p>Quick Start</p> <p>All available designs can be accessed after a simple import statement:</p> <pre><code>&gt;&gt;&gt; from pyDOE3 import *\n</code></pre>"},{"location":"low_discrepancy_sequences/#sukharev-grid","title":"Sukharev Grid (<code>sukharev_grid</code>)","text":"<p>Sukharev grid designs for uniform space-filling.</p> <p>[Detailed content will be added after full conversion]</p>"},{"location":"low_discrepancy_sequences/#sobol-sequence","title":"Sobol' Sequence (<code>sobol_sequence</code>)","text":"<p>Sobol' sequences for quasi-random sampling.</p> <p>[Detailed content will be added after full conversion]</p>"},{"location":"low_discrepancy_sequences/#halton-sequence","title":"Halton Sequence (<code>halton_sequence</code>)","text":"<p>Halton sequences for low-discrepancy sampling.</p> <p>[Detailed content will be added after full conversion]</p>"},{"location":"low_discrepancy_sequences/#rank1-lattice","title":"Rank-1 Lattice Design (<code>rank1_lattice</code>)","text":"<p>Rank-1 lattice designs for uniform coverage.</p> <p>[Detailed content will be added after full conversion]</p>"},{"location":"low_discrepancy_sequences/#korobov-sequence","title":"Korobov Sequence (<code>korobov_sequence</code>)","text":"<p>Korobov sequences for integration and sampling.</p> <p>[Detailed content will be added after full conversion]</p>"},{"location":"low_discrepancy_sequences/#cranley-patterson","title":"Cranley-Patterson Randomization (<code>cranley_patterson_shift</code>)","text":"<p>Cranley-Patterson randomization for quasi-Monte Carlo methods.</p> <p>[Detailed content will be added after full conversion]</p>"},{"location":"randomized/","title":"Randomized Designs","text":"<p>In this section, the following kinds of randomized designs will  be described:</p> <ul> <li>Latin-Hypercube</li> <li>Random K-Means</li> <li>Random Uniform</li> </ul> <p>Quick Start</p> <p>All available designs can be accessed after a simple import statement:</p> <pre><code>&gt;&gt;&gt; from pyDOE3 import *\n</code></pre>"},{"location":"randomized/#latin-hypercube","title":"Latin-Hypercube (<code>lhs</code>)","text":"<p>Latin-hypercube designs can be created using the following simple syntax:</p> <pre><code>&gt;&gt;&gt; lhs(n, [samples, criterion, iterations])\n</code></pre> <p>where </p> <ul> <li>n: an integer that designates the number of factors (required)</li> <li>samples: an integer that designates the number of sample points to    generate for each factor (default: n)</li> <li> <p>criterion: a string that tells <code>lhs</code> how to sample the points   (default: None, which simply randomizes the points within the intervals):</p> </li> <li> <p>\"center\" or \"c\": center the points within the sampling intervals</p> </li> <li>\"maximin\" or \"m\": maximize the minimum distance between points, but     place the point in a randomized location within its interval</li> <li>\"centermaximin\" or \"cm\": same as \"maximin\", but centered within the     intervals</li> <li>\"correlation\" or \"corr\": minimize the maximum correlation coefficient</li> <li>\"lhsmu\" : Latin hypercube with multifimensional Uniformity. Correlation between      variable can be enforced by setting a valid correlation matrix.</li> </ul> <p>The output design scales all the variable ranges from zero to one which can then be transformed as the user wishes (like to a specific statistical distribution using the <code>scipy.stats.distributions</code> <code>ppf</code> (inverse cumulative distribution) function.</p> <p>For example, if I wanted to transform the uniform distribution of 8 samples to a normal distribution (mean=0, standard deviation=1), I would do  something like:</p> <pre><code>&gt;&gt;&gt; from scipy.stats.distributions import norm\n&gt;&gt;&gt; lhd = lhs(2, samples=5)\n&gt;&gt;&gt; lhd = norm(loc=0, scale=1).ppf(lhd)  # this applies to both factors here\n</code></pre> <p>Graphically, each transformation would look like the following, going  from the blue sampled points (from using <code>lhs</code>) to the green sampled points that are normally distributed:</p> <p></p>"},{"location":"randomized/#examples","title":"Examples","text":"<p>A basic 4-factor latin-hypercube design:</p> <pre><code>&gt;&gt;&gt; lhs(4, criterion='center')\narray([[ 0.875,  0.625,  0.875,  0.125],\n       [ 0.375,  0.125,  0.375,  0.375],\n       [ 0.625,  0.375,  0.125,  0.625],\n       [ 0.125,  0.875,  0.625,  0.875]])\n</code></pre> <p>Let's say we want more samples, like 10:</p> <pre><code>&gt;&gt;&gt; lhs(4, samples=10, criterion='center')\narray([[ 0.05,  0.05,  0.15,  0.15],\n       [ 0.55,  0.85,  0.95,  0.75],\n       [ 0.25,  0.25,  0.45,  0.25],\n       [ 0.45,  0.35,  0.75,  0.45],\n       [ 0.75,  0.55,  0.25,  0.55],\n       [ 0.95,  0.45,  0.35,  0.05],\n       [ 0.35,  0.95,  0.05,  0.65],\n       [ 0.15,  0.65,  0.55,  0.35],\n       [ 0.85,  0.75,  0.85,  0.85],\n       [ 0.65,  0.15,  0.65,  0.95]])\n</code></pre>"},{"location":"randomized/#random-k-means","title":"Random K-Means (<code>random_k_means</code>)","text":"<p>Random K-Means clustering design for experimental design applications.</p> <p>[Detailed content would be added here after full conversion]</p>"},{"location":"randomized/#random-uniform","title":"Random Uniform (<code>random_uniform</code>)","text":"<p>Random uniform sampling design for generating uniformly distributed experimental points.</p> <p>[Detailed content would be added here after full conversion]</p>"},{"location":"rsm/","title":"Response Surface Designs","text":"<p>In this section, the following kinds of response surface designs will  be described:</p> <ul> <li>Box-Behnken</li> <li>Central Composite</li> <li>Doehlert Design</li> </ul> <p>Quick Start</p> <p>All available designs can be accessed after a simple import statement:</p> <pre><code>&gt;&gt;&gt; from pyDOE3 import *\n</code></pre>"},{"location":"rsm/#box-behnken","title":"Box-Behnken (<code>bbdesign</code>)","text":"<p>Box-Behnken designs can be created using the following simple syntax:</p> <pre><code>&gt;&gt;&gt; bbdesign(n, center)\n</code></pre> <p>where <code>n</code> is the number of factors (at least 3 required) and <code>center</code>  is the number of center points to include. If no inputs given to  <code>center</code>, then a pre-determined number of points are automatically included. </p>"},{"location":"rsm/#examples","title":"Examples","text":"<p>The default 3-factor Box-Behnken design:</p> <pre><code>&gt;&gt;&gt; bbdesign(3)\narray([[-1., -1.,  0.],\n       [ 1., -1.,  0.],\n       [-1.,  1.,  0.],\n       [ 1.,  1.,  0.],\n       [-1.,  0., -1.],\n       [ 1.,  0., -1.],\n       [-1.,  0.,  1.],\n       [ 1.,  0.,  1.],\n       [ 0., -1., -1.],\n       [ 0.,  1., -1.],\n       [ 0., -1.,  1.],\n       [ 0.,  1.,  1.],\n       [ 0.,  0.,  0.],\n       [ 0.,  0.,  0.],\n       [ 0.,  0.,  0.]])\n</code></pre> <p>A customized design with four factors, but only a single center point:</p> <pre><code>&gt;&gt;&gt; bbdesign(4, center=1)\narray([[-1., -1.,  0.,  0.],\n       [ 1., -1.,  0.,  0.],\n       [-1.,  1.,  0.,  0.],\n       [ 1.,  1.,  0.,  0.],\n       [-1.,  0., -1.,  0.],\n       [ 1.,  0., -1.,  0.],\n       [-1.,  0.,  1.,  0.],\n       [ 1.,  0.,  1.,  0.],\n       [-1.,  0.,  0., -1.],\n       [ 1.,  0.,  0., -1.],\n       [-1.,  0.,  0.,  1.],\n       [ 1.,  0.,  0.,  1.],\n       [ 0., -1., -1.,  0.],\n       [ 0.,  1., -1.,  0.],\n       [ 0., -1.,  1.,  0.],\n       [ 0.,  1.,  1.,  0.],\n       [ 0., -1.,  0., -1.],\n       [ 0.,  1.,  0., -1.],\n       [ 0., -1.,  0.,  1.],\n       [ 0.,  1.,  0.,  1.],\n       [ 0.,  0., -1., -1.],\n       [ 0.,  0.,  1., -1.],\n       [ 0.,  0., -1.,  1.],\n       [ 0.,  0.,  1.,  1.],\n       [ 0.,  0.,  0.,  0.]])\n</code></pre>"},{"location":"rsm/#central-composite","title":"Central Composite (<code>ccdesign</code>)","text":"<p>Central composite designs can be created and customized using the syntax:</p> <pre><code>&gt;&gt;&gt; ccdesign(n, center, alpha, face)\n</code></pre> <p>where </p> <ul> <li><code>n</code> is the number of factors, </li> <li><code>center</code> is a 2-tuple of center points (one for the factorial block,   one for the star block, default (4, 4)), </li> <li><code>alpha</code> is either \"orthogonal\" (or \"o\", default) or \"rotatable\"    (or \"r\")</li> <li><code>face</code> is either \"circumscribed\" (or \"ccc\", default), \"inscribed\"   (or \"cci\"), or \"faced\" (or \"ccf\").</li> </ul> <p></p> <p>The two optional keyword arguments <code>alpha</code> and <code>face</code> help describe how the variance in the quadratic approximation is distributed. Please see the NIST web pages if you are uncertain which options are suitable for your situation.</p> <p>Note</p> <ul> <li>'ccc' and 'cci' can be rotatable designs, but 'ccf' cannot.</li> <li>If <code>face</code> is specified, while <code>alpha</code> is not, then the default   value of <code>alpha</code> is 'orthogonal'.</li> </ul>"},{"location":"rsm/#examples_1","title":"Examples","text":"<p>Simplest input, assuming default kwargs:</p> <pre><code>&gt;&gt;&gt; ccdesign(2)\narray([[-1.        , -1.        ],\n       [ 1.        , -1.        ],\n       [-1.        ,  1.        ],\n       [ 1.        ,  1.        ],\n       [ 0.        ,  0.        ],\n       [ 0.        ,  0.        ],\n       [ 0.        ,  0.        ],\n       [ 0.        ,  0.        ],\n       [-1.41421356,  0.        ],\n       [ 1.41421356,  0.        ],\n       [ 0.        , -1.41421356],\n       [ 0.        ,  1.41421356],\n       [ 0.        ,  0.        ],\n       [ 0.        ,  0.        ],\n       [ 0.        ,  0.        ],\n       [ 0.        ,  0.        ]])\n</code></pre> <p>More customized input, say, for a set of computer experiments where there isn't variability so we only need a single center point:</p> <pre><code>&gt;&gt;&gt; ccdesign(3, center=(0, 1), alpha='r', face='cci')\narray([[-0.59460356, -0.59460356, -0.59460356],\n       [ 0.59460356, -0.59460356, -0.59460356],\n       [-0.59460356,  0.59460356, -0.59460356],\n       [ 0.59460356,  0.59460356, -0.59460356],\n       [-0.59460356, -0.59460356,  0.59460356],\n       [ 0.59460356, -0.59460356,  0.59460356],\n       [-0.59460356,  0.59460356,  0.59460356],\n       [ 0.59460356,  0.59460356,  0.59460356],\n       [-1.        ,  0.        ,  0.        ],\n       [ 1.        ,  0.        ,  0.        ],\n       [ 0.        , -1.        ,  0.        ],\n       [ 0.        ,  1.        ,  0.        ],\n       [ 0.        ,  0.        , -1.        ],\n       [ 0.        ,  0.        ,  1.        ],\n       [ 0.        ,  0.        ,  0.        ]])\n</code></pre>"},{"location":"rsm/#doehlert-design","title":"Doehlert Design (<code>doehlert_shell_design</code>, <code>doehlert_simplex_design</code>)","text":"<p>An alternative and very useful design for second-order models is the uniform shell design proposed by Doehlert in 1970<sup>[1]</sup>. Doehlert designs are especially advantageous when optimizing multiple variables, requiring fewer experiments than central composite designs, while providing efficient and uniform coverage of the experimental domain.</p> <p>The Doehlert design defines a spherical experimental domain and emphasizes uniform space filling. Although it is not orthogonal or rotatable, it is generally sufficient for practical applications.</p> <p>For two variables, the Doehlert design consists of a center point and six points forming a regular hexagon, situated on a circle.</p> <p>The total number of experiments is given by:</p> \\[N = k^2 + k + C_0\\] <p>where</p> <ul> <li>\\(k\\) = number of factors (variables)</li> <li>\\(C_0\\) = number of center points</li> </ul> <p>Two implementations are included:</p> <ul> <li><code>doehlert_shell_design</code>: uses a shell-based spherical approach with optional center points.</li> <li><code>doehlert_simplex_design</code>: uses a simplex-based method to uniformly fill the design space.</li> </ul>"},{"location":"rsm/#examples_2","title":"Examples","text":"<p>Create a Doehlert design with 3 factors and 1 center point using the shell approach:</p> <pre><code>&gt;&gt;&gt; doehlert_shell_design(3, num_center_points=1)\narray([[ 0.       ,  0.       ,  0.        ],\n       [ 1.       ,  0.       ,  0.        ],\n       [-0.5      ,  0.8660254,  0.        ],\n       [-0.5      , -0.8660254,  0.        ],\n       [ 0.8660254,  0.5      ,  0.        ],\n       [ 0.8660254, -0.5      ,  0.        ],\n       ... ])\n</code></pre> <p>Create a Doehlert design using the simplex approach for 3 factors:</p> <pre><code>&gt;&gt;&gt; doehlert_simplex_design(3)\narray([[ 0.      ,  0.       , 0.        ],\n       [ 1.      ,  0.       , 0.        ],\n       [ 0.      ,  0.8660254, 0.        ],\n       [ 0.      ,  0.5      , 0.81649658],\n       [-1.      ,  0.       , 0.        ],\n       [ 0.      , -0.8660254, 0.        ],\n       ... ])\n</code></pre> <p>Note</p> <p>Doehlert designs are recommended for response surface modeling when good space coverage and fewer experimental runs are desired.</p> <p>^[1]: Doehlert, David H. 1970. \"Uniform Shell Designs.\" Applied Statistics 19 (3): 231. https://doi.org/10.2307/2346327</p>"},{"location":"rsm/#more-information","title":"More Information","text":"<p>If the user needs more information about appropriate designs, please  consult the following articles:</p> <ul> <li>Box-Behnken designs</li> <li>Central composite designs</li> <li>Doehlert design</li> </ul> <p>There is also a wealth of information on the NIST website about the various design matrices that can be created as well as detailed information about designing/setting-up/running experiments in general.</p>"},{"location":"sampling_designs/","title":"Sampling Designs","text":"<p>In this section, the following kinds of sampling designs will  be described:</p> <ul> <li>Morris Method</li> <li>Saltelli Sampling</li> </ul> <p>Quick Start</p> <p>All available designs can be accessed after a simple import statement:</p> <pre><code>&gt;&gt;&gt; from pyDOE3 import *\n</code></pre>"},{"location":"sampling_designs/#morris-method","title":"Morris Method (<code>morris_sampling</code>)","text":"<p>Morris method for sensitivity analysis and screening.</p> <p>[Detailed content will be added after full conversion]</p>"},{"location":"sampling_designs/#saltelli-sampling","title":"Saltelli Sampling (<code>saltelli_sampling</code>)","text":"<p>Saltelli sampling for variance-based sensitivity analysis.</p> <p>[Detailed content will be added after full conversion]</p>"},{"location":"taguchi/","title":"Taguchi Designs","text":"<p>In this section, the following kinds of Taguchi designs will  be described:</p> <ul> <li>Orthogonal Arrays</li> <li>Robust Design Utilities</li> </ul> <p>Quick Start</p> <p>All available designs can be accessed after a simple import statement:</p> <pre><code>&gt;&gt;&gt; from pyDOE3 import *\n</code></pre>"},{"location":"taguchi/#orthogonal-arrays","title":"Orthogonal Arrays","text":"<p>Taguchi orthogonal arrays for robust design experiments.</p> <p>[Detailed content will be added after full conversion]</p>"},{"location":"taguchi/#robust-design-utilities","title":"Robust Design Utilities","text":"<p>Signal-to-noise ratio calculations and robust design analysis.</p> <p>[Detailed content will be added after full conversion]</p>"}]}